import React, { useState } from 'react'
import './App.css'
import TarotCard from './components/TarotCard'
import { cards, Card } from './types/tarot'
import { useTranslation } from 'react-i18next'
import { requestTarotReading, TarotReading } from './services/tarotAPI'
import { trackReadingRequest, trackReadingCompletion } from './utils/analytics'

function App() {
  const { t } = useTranslation()
  const [drawnCards, setDrawnCards] = useState<Card[]>([])
  const [question, setQuestion] = useState('')
  const [reading, setReading] = useState<TarotReading | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  const handleQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuestion(event.target.value)
  }

  const handleDraw = () => {
    const shuffled = [...cards].sort(() => Math.random() - 0.5)
    const drawn = shuffled.slice(0, 3)
    setDrawnCards(drawn)
    setReading(null)
  }

  const handleGetReading = async () => {
    setIsLoading(true)

    // Track reading request
    trackReadingRequest(question)

    try {
      const cardData = drawnCards.map((card, index) => ({
        name: card.name,
        position: index === 0 ? 'Past' : index === 1 ? 'Present' : 'Future',
      }))

      const tarotReading = await requestTarotReading(question, cardData)
      setReading(tarotReading)

      // Track successful reading completion
      trackReadingCompletion()
    } catch (error) {
      console.error('Failed to get reading:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter' && question && !isLoading) {
      handleDraw()
    }
  }

  return (
    <div className={`App ${drawnCards.length === 0 ? 'no-cards' : ''}`}>
      <div className="main-content">
        <header className="App-header">
          <h1>{t('Tarot Master')}</h1>
          <p>{t('Discover your future with a touch of modern magic.')}</p>
        </header>
        <div className="question-container">
          <input
            type="text"
            value={question}
            onChange={handleQuestionChange}
            onKeyDown={handleKeyDown}
            placeholder={t('Enter your question')}
            className="question-input"
            disabled={isLoading}
          />
        </div>
        <div className="button-container">
          <button onClick={handleDraw} disabled={!question}>
            {t('Draw 3 Cards')}
          </button>
        </div>
      </div>
      <div
        className={`card-container ${drawnCards.length > 0 ? 'visible' : ''}`}
      >
        {drawnCards.map((card) => (
          <TarotCard key={card.id} card={card} />
        ))}
      </div>
      {drawnCards.length > 0 && !reading && (
        <div className="button-container">
          <button onClick={handleGetReading} disabled={isLoading}>
            {isLoading ? t('Getting Reading...') : t('Get Reading')}
          </button>
        </div>
      )}
      {reading && (
        <div className="reading-container">
          <p>{reading.overallReading}</p>
        </div>
      )}
      <footer className="App-footer">
        <p>{t('Content generated by AI, please verify carefully.')}</p>
      </footer>
    </div>
  )
}

export default App
