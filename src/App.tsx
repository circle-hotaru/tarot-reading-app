import React, { useState } from 'react'
import './App.css'
import TarotCard from './components/TarotCard'
import { cards, Card } from './types/tarot'
import { useTranslation } from 'react-i18next'
import { requestTarotReading, TarotReading } from './services/tarotAPI'
import { trackReadingRequest, trackReadingCompletion } from './utils/analytics'

function App() {
  const { t } = useTranslation()
  const [drawnCards, setDrawnCards] = useState<Card[]>([])
  const [question, setQuestion] = useState('')
  const [reading, setReading] = useState<TarotReading | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  const handleQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuestion(event.target.value)
  }

  const handleDraw = () => {
    const shuffled = [...cards].sort(() => Math.random() - 0.5)
    const drawn = shuffled.slice(0, 3)
    setDrawnCards(drawn)
    setReading(null)
  }

  const handleGetReading = async () => {
    setIsLoading(true)

    // Track reading request
    trackReadingRequest(question)

    try {
      const cardData = drawnCards.map((card, index) => ({
        name: card.name,
        position: index === 0 ? 'Past' : index === 1 ? 'Present' : 'Future',
      }))

      const tarotReading = await requestTarotReading(question, cardData)
      setReading(tarotReading)

      // Track successful reading completion
      trackReadingCompletion()
    } catch (error) {
      console.error('Failed to get reading:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter' && question && !isLoading) {
      handleDraw()
    }
  }

  return (
    <div className={`App ${drawnCards.length === 0 ? 'no-cards' : ''}`}>
      <main className="main-content">
        <header className="App-header">
          <h1>{t('Tarot Master')}</h1>
          <p>{t('Discover your future with a touch of modern magic.')}</p>
        </header>
        <section className="question-section" aria-label="Ask your question">
          <div className="question-container">
            <label htmlFor="question-input" className="visually-hidden">
              {t('Enter your question')}
            </label>
            <input
              id="question-input"
              type="text"
              value={question}
              onChange={handleQuestionChange}
              onKeyDown={handleKeyDown}
              placeholder={t('Enter your question')}
              className="question-input"
              disabled={isLoading}
              aria-describedby="question-help"
            />
            <div id="question-help" className="visually-hidden">
              {t('Ask any question about your future, love, career, or life guidance')}
            </div>
          </div>
          <div className="button-container">
            <button 
              onClick={handleDraw} 
              disabled={!question}
              aria-label={t('Draw three tarot cards for your reading')}
            >
              {t('Draw 3 Cards')}
            </button>
          </div>
        </section>
      </main>
      <section 
        className={`card-container ${drawnCards.length > 0 ? 'visible' : ''}`}
        aria-label="Selected tarot cards"
        role="region"
      >
        {drawnCards.map((card, index) => (
          <article key={card.id} className="card-article">
            <h3 className="visually-hidden">
              {index === 0 ? t('Past') : index === 1 ? t('Present') : t('Future')} Card
            </h3>
            <TarotCard card={card} />
          </article>
        ))}
      </section>
      {drawnCards.length > 0 && !reading && (
        <section className="reading-action-section">
          <div className="button-container">
            <button 
              onClick={handleGetReading} 
              disabled={isLoading}
              aria-label={t('Get AI-powered interpretation of your tarot cards')}
            >
              {isLoading ? t('Getting Reading...') : t('Get Reading')}
            </button>
          </div>
        </section>
      )}
      {reading && (
        <section className="reading-container" aria-label="Your tarot reading">
          <article className="reading-article">
            <h2 className="visually-hidden">{t('Your Tarot Reading')}</h2>
            <p>{reading.overallReading}</p>
          </article>
        </section>
      )}
      <footer className="App-footer">
        <p>{t('Content generated by AI, please verify carefully.')}</p>
      </footer>
    </div>
  )
}

export default App
